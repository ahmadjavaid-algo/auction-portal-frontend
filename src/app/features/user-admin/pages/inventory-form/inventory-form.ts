import { Component, Inject, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { MAT_DIALOG_DATA, MatDialogRef, MatDialogModule } from '@angular/material/dialog';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatCardModule } from '@angular/material/card';
import { MatSelectModule } from '@angular/material/select';

import { Inventory } from '../../../../models/inventory.model';
import { Product } from '../../../../models/product.model';
import { ProductsService } from '../../../../services/products.service';
import { AuthService } from '../../../../services/auth';

type Mode = 'create' | 'edit';

export type InventoryFormResult =
  | { action: 'create'; payload: Inventory }
  | { action: 'edit';   payload: Inventory };

@Component({
  selector: 'app-inventory-form',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    MatFormFieldModule,
    MatInputModule,
    MatSelectModule,
    MatButtonModule,
    MatCardModule,
    MatDialogModule
  ],
  templateUrl: './inventory-form.html',
  styleUrls: ['./inventory-form.scss']
})
export class InventoryForm implements OnInit {
  form!: FormGroup;
  mode: Mode;

  // dropdown data
  products: Product[] = [];
  loadingProducts = false;

  constructor(
    private fb: FormBuilder,
    private dialogRef: MatDialogRef<InventoryForm, InventoryFormResult>,
    private auth: AuthService,
    private productsSvc: ProductsService,
    @Inject(MAT_DIALOG_DATA) public data: { mode: Mode; initialData?: Inventory | null }
  ) {
    this.mode = data.mode;
  }

  ngOnInit(): void {
    // build form (only Product + Description are needed; others handled by SP)
    this.form = this.fb.group({
      inventoryId: [0],
      productId: [null, Validators.required],
      description: ['', [Validators.maxLength(4000)]]
    });

    // preload products for dropdown
    this.loadingProducts = true;
    this.productsSvc.getList().subscribe({
      next: (list) => (this.products = list ?? []),
      error: () => (this.products = []),
      complete: () => (this.loadingProducts = false)
    });

    // if editing, populate fields
    if (this.mode === 'edit' && this.data.initialData) {
      const r = this.data.initialData;
      this.form.patchValue({
        inventoryId: r.inventoryId,
        productId: r.productId ?? null,
        description: r.description ?? ''
      });
    }
  }

  onSubmit(): void {
    if (this.form.invalid) return;

    const v = this.form.getRawValue();
    const currentUserId = this.auth.currentUser?.userId ?? null;

    const payload: Inventory = {
      inventoryId: v.inventoryId,
      productId: v.productId,
      productJSON: '', // generated by SP on Add; leave blank on wire
      description: (v.description ?? '').trim(),

      // audit fields (SP fills dates; we provide ids)
      createdById: this.mode === 'create' ? currentUserId : null,
      createdDate: null,
      modifiedById: currentUserId ?? null,
      modifiedDate: null,
      // active handled via separate activate endpoint if any
    } as Inventory;

    this.dialogRef.close(
      this.mode === 'create'
        ? { action: 'create', payload }
        : { action: 'edit', payload }
    );
  }

  onCancel(): void {
    this.dialogRef.close();
  }

  // convenience to display product label (DisplayName + Category)
  productLabel(p: any): string {
    const name = p?.displayName ?? '';
    const cat  = p?.categoryName ?? p?.categoryId ?? '';
    return cat ? `${name} â€¢ ${cat}` : name;
  }
}
